stages:

- stage: ProvisionEnvironment
  variables:
    - group: 'Terraform Service Principal'
    - group: 'Terraform State'
    - name: tfstate_key
      value: 'scubaninja.emotion-checker.master.tfstate'
    - name: resource_name
      value: 'emotionchecker'

  jobs:
  - job: TransformConfiguration
    pool:      
      vmImage: 'Ubuntu-16.04'
    steps:
    - task: qetza.replacetokens.replacetokens-task.replacetokens@3
      displayName: 'Replace tokens in **/*.tfvars'

      inputs:
        rootDirectory: ./env
        targetFiles: '**/*.tfvars'
  
    - script: |
        terraform init \
          -backend-config="resource_group_name=$(tfstate_resource_group)" \
          -backend-config="storage_account_name=$(tfstate_storage_account)" \
          -backend-config="container_name=$(tfstate_container)" \
          -backend-config="key=$(tfstate_key)" \
          -backend-config="access_key=$(tfstate_access_key)"

      workingDirectory: ./env
      displayName: 'Terraform init'

    - script: |
       terraform apply -auto-approve

      workingDirectory: ./env
      displayName: 'Terraform apply'

- stage: Build
  jobs:
  - job: BuildFunction
    pool:
      vmImage: 'Ubuntu-16.04'
    steps:
      - script: dotnet build
        displayName: 'dotnet build'
        workingDirectory: ./src      

      - task: DotNetCoreCLI@2
        displayName: 'dotnet test'
        inputs:
          command: test
          projects: '**/*Tests.csproj'
          arguments: '--collect "Code coverage"'

      - task: CopyFiles@2
        displayName: 'Remove test assemblies'
        inputs:
          SourceFolder: '$(System.DefaultWorkingDirectory)'
          Contents: |
            src/ImageProcessor/bin/Debug/**
            !**\*Test*
            !**\*xunit*
          TargetFolder: '$(Build.ArtifactStagingDirectory)'

      - task: ArchiveFiles@2
        displayName: 'Zip'
        inputs:
          rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/src/ImageProcessor/bin/Debug/netcoreapp2.1'
          includeRootFolder: false
          archiveType: 'zip'
          archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
          replaceExistingArchive: true

      - task: PublishPipelineArtifact@0
        inputs:
          artifactName: 'function' 
          targetPath: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'

- stage: Deploy
  variables:
    function_name: placeholder

  jobs:
  - job: Deploy
    variables:
      - group: 'Terraform Service Principal'
      - group: 'Terraform State'
      - name: tfstate_key
        value: 'scubaninja.emotion-checker.master.tfstate'
      - name: resource_name
        value: 'emotionchecker'
    pool:      
      vmImage: 'Ubuntu-16.04'
    steps:
    - script: |
        terraform init \
          -backend-config="resource_group_name=$(tfstate_resource_group)" \
          -backend-config="storage_account_name=$(tfstate_storage_account)" \
          -backend-config="container_name=$(tfstate_container)" \
          -backend-config="key=$(tfstate_key)" \
          -backend-config="access_key=$(tfstate_access_key)"

      workingDirectory: ./env
      displayName: 'Terraform init'

    - script: |
        functionname=$(terraform output -json function_name | jq '.value' | tr -d '"')   
        echo "##vso[task.setvariable variable=function_name;]$functionname"

      workingDirectory: ./env
      displayName: 'Get function name'

    - task: DownloadPipelineArtifact@1
      inputs:
        buildType: current
        artifactName: function
        downloadPath: '$(System.ArtifactsDirectory)' 

    - task: AzureFunctionApp@1
      displayName: Azure Function App Deploy
      inputs:
        azureSubscription: $(subscription_service_connection)
        appType: functionApp
        appName: $(function_name)
        package: $(System.ArtifactsDirectory)/**/*.zip
        deploymentMethod: auto